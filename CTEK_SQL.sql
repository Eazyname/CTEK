drop table public.Customers,public.Orders,public.OrderItems;

CREATE TABLE IF NOT EXISTS public.Customers
(
	row_id integer GENERATED ALWAYS AS IDENTITY,
    name varchar not null,
    CONSTRAINT PK_Customers PRIMARY KEY (row_id)
);

CREATE TABLE IF NOT EXISTS public.Orders
(
   row_id integer not null GENERATED ALWAYS AS IDENTITY,
   parent_id integer,               -- row_id родительской группы
   group_name varchar,              -- наименование группы заказов
   customer_id integer,             -- row_id заказчика
   registered_at date,              -- дата регистрации заказа

   CONSTRAINT PK_Orders PRIMARY KEY (row_id),
   constraint FK_Orders_Folder 
      foreign key (parent_id) 
      references public.Orders(row_id)
      on delete no action
      on update no action,
   constraint FK_Customers
      foreign key (customer_id)
      references public.Customers(row_id)
      on delete cascade
      on update cascade
);

CREATE TABLE IF NOT EXISTS public.OrderItems
(
   row_id integer not null GENERATED BY DEFAULT AS IDENTITY,
   order_id int not null,                 -- row_id заказа
   name varchar not null,           -- наименование позиции
   price int not null,                    -- стоимость позиции в рублях

   constraint PK_OrderItems
   primary key (row_id),
   constraint FK_OrderItems_Orders
      foreign key (order_id) 
      references public.Orders(row_id)
      on delete cascade
      on update cascade
);

insert into public.Customers(name) values
(N'Иванов'),                                                            
(N'Петров'),                                                            
(N'Сидоров'),                                                             
(N'ИП Федоров');

insert into public.Orders(parent_id, group_name, customer_id, registered_at) values 
(null, N'Все заказы', null, null),
(1, N'Частные лица', null, null),
(2, N'Оргтехника', null, null),
(3, null, 1, '2019/10/02'),
(3, null, 1, '2020/05/17'),
(3, null, 1, '2020/04/28'),
(3, null, 2, '2019/08/05'),
(3, null, 2, '2020/05/17'),
(3, null, 2, '2020/02/11'),
(2, N'Канцелярия', null, null),
(10, null, 3, '2020/04/09'),
(1, N'Юридические лица', null, null),
(12, null, 4, '2020/06/25');

insert into public.OrderItems(order_id, name, price) values 
(4, N'Принтер', 30),
(4, N'Факс', 20),
(5, N'Принтер', 50),
(5, N'Кассовый аппарат', 40),
(5, N'Факс', 30),
(6, N'Кассовый аппарат', 30),
(6, N'Кассовый аппарат', 40),
(7, N'Копировальный аппарат', 50),
(7, N'Калькулятор', 10),
(7, N'Кассовый аппарат', 60),
(8, N'Принтер', 50),
(8, N'Калькулятор', 10),
(9, N'Телефонный аппарат', 50),
(9, N'Кассовый аппарат', 40),
(11, N'Бумага', 2),
(11, N'Ручки', 1),
(13, N'Кулер', 100),
(13, N'Стулья', 70),
(13, N'Факс', 20);

---------------------- Задание 1 ----------------------

CREATE OR REPLACE FUNCTION public.select_orders_by_item_name(name_position varchar) 
RETURNS TABLE(order_id integer,customer varchar,items_count integer)
AS $$ 
SELECT oi.order_id, c.name,count(*) from public.OrderItems oi
JOIN public.Orders o ON o.row_id = oi.order_id
JOIN public.Customers c ON o.customer_id = c.row_id
WHERE oi.name = name_position
GROUP BY oi.order_id,c.name
$$ LANGUAGE SQL;

SELECT * from public.select_orders_by_item_name(N'Факс')
UNION ALL 
SELECT * from public.select_orders_by_item_name(N'Кассовый аппарат')
UNION ALL 
SELECT * from public.select_orders_by_item_name(N'Стулья');
---------------------- Задание 2 ----------------------
CREATE OR REPLACE FUNCTION public.calculate_total_price_for_orders_group(name_position integer) 
RETURNS integer AS $$ 
DECLARE total integer;
BEGIN
	IF name_position = 1 THEN
		total := (SELECT sum(oi.price) from public.OrderItems oi 
				JOIN public.Orders o ON o.row_id = oi.order_id);
	ELSEIF name_position between 12 and 13 THEN 
		total := (SELECT sum(oi.price) from public.OrderItems oi 
				JOIN public.Orders o ON o.row_id = oi.order_id
				 WHERE o.customer_id = 4);				
	ELSEIF name_position = 2 THEN 
		total := (SELECT sum(oi.price) from public.OrderItems oi 
				JOIN public.Orders o ON o.row_id = oi.order_id
				WHERE o.customer_id between 1 and 3);	
	ELSEIF name_position = 3 THEN 
	 	total := (SELECT sum(oi.price) from public.OrderItems oi 
				JOIN public.Orders o ON o.row_id = oi.order_id
				WHERE oi.name in (N'Принтер',N'Факс',N'Кассовый аппарат',N'Телефонный аппарат',N'Копировальный аппарат'));
	ELSEIF name_position = 10 THEN 
	 	total := (SELECT sum(oi.price) from public.OrderItems oi 
				JOIN public.Orders o ON o.row_id = oi.order_id
				WHERE oi.name in (N'Калькулятор',N'Бумага',N'Стулья',N'Кулер',N'Ручки'));
	ELSE 
		total := 0;
	END IF;
	RETURN total;
END;
$$ LANGUAGE plpgsql;

SELECT public.calculate_total_price_for_orders_group(1) AS total_price;

---------------------- Задание 3 ----------------------

SELECT with_kass_apparat.name FROM (SELECT c.name,oi.order_id AS orders,COUNT(DISTINCT(CASE WHEN oi.name = N'Кассовый аппарат' THEN 1 END)) AS kass
FROM public.OrderItems oi
JOIN public.Orders o ON o.row_id = oi.order_id
JOIN public.Customers c ON o.customer_id = c.row_id
WHERE extract(year from registered_at) = 2020
GROUP BY oi.order_id,c.name) AS with_kass_apparat
GROUP BY name
HAVING COUNT(*) <= sum(with_kass_apparat.kass);








